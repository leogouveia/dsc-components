import { AfterViewInit, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { ControlValueAccessor, FormControl, Validator } from '@angular/forms';
import { tamanhoInputType, tipoTextoFeedBackType } from '../../types/inputTypes';
import { TamanhoInputEnum } from '../../enum/inputEnums';
import { Subscription } from 'rxjs';
export declare class DscInputComponent implements OnInit, OnChanges, AfterViewInit, ControlValueAccessor, OnDestroy, Validator {
    dscRotulo?: string;
    dscRotulo_?: string;
    dscInformacaoAdicional?: string;
    dscInformacaoAdicional_?: string;
    dscIconeInformativo?: string;
    dscIconeInformativo_?: string;
    dscIconLeft?: string;
    dscIconLeft_?: string;
    dscPlaceholder: string;
    dscPlaceholder_: string;
    dscIsClearButton?: boolean;
    dscIsClearButton_: boolean;
    dscTipoTextoFeedBack?: tipoTextoFeedBackType;
    dscTipoTextoFeedBack_: tipoTextoFeedBackType;
    dscTextoFeedBack?: string;
    dscTextoFeedBack_?: string;
    dscTextoComplementar?: string;
    dscTextoComplementar_?: string;
    dscIsContadorCaractere?: boolean;
    dscIsContadorCaractere_: boolean;
    dscTamanhoMaximo?: number;
    dscTamanhoMaximo_: number;
    dscMask?: any;
    dscMask_: any;
    dscIsPassword?: boolean;
    dscIsPassword_: boolean;
    dscVoice?: boolean;
    dscVoice_: boolean;
    dscTipoTamanhoInput: tamanhoInputType;
    dscTipoTamanhoInput_: TamanhoInputEnum;
    dscEventEnter: EventEmitter<void>;
    input: ElementRef;
    classe_box: string;
    arrayType: string[];
    icone_feedBack: string;
    mapaClasseIcone: Map<string, string>;
    typeDomInput: string;
    showMicIcon: boolean;
    mapaTamanhoInput: Map<TamanhoInputEnum, string>;
    mapaHeader: Map<TamanhoInputEnum, string>;
    classeHeader: string;
    classFormField: string;
    classBorda: string;
    classComplementar: string;
    stackSuffix: any[];
    onTouched: Function;
    onChangeSubs: Subscription[];
    formControlInput: FormControl;
    constructor();
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    validate(): any;
    registerOnChange(onChange: any): void;
    setDisabledState(disabled: boolean): void;
    writeValue(value: any): void;
    registerOnTouched(onTouched: Function): void;
    aplicarClasseFeedBack(): void;
    aplicarClasseComplementar(): void;
    aplicarClasseMatFormField(): void;
    limparInput(): void;
    inicializarMapaIconeFeedback(): void;
    private aplicarMascara;
    private limparMascara;
    private validarPassword;
    private configurarInputMask;
    escutarTeclas($event: KeyboardEvent): void;
    private tratarMicrofone;
    private hideMic;
    private showMic;
    validarSuffix(): void;
    retornarSuffixMarcado(): void;
    inicializarMapaTamanhoInput(): void;
    inicializarMapaHeader(): void;
    mudarClasseParaMic(): void;
    escutarInputTratarBorda(): void;
    private tratarClasseMatFormFieldClearButton;
}
